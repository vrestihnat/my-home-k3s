#!/bin/bash

# Script pro spr√°vu DNS z√°znam≈Ø v Pi-hole custom.list

# Konfigurace
PIHOLE_HOST="192.168.17.7"
PIHOLE_USER="root"
PIHOLE_CUSTOM_LIST="/root/docker/pihole/etc-pihole/custom.list"
LOCAL_K3S_IP="192.168.17.26"

# Funkce pro zobrazen√≠ n√°povƒõdy
show_help() {
    echo "üîß Pi-hole DNS Manager pro K3s"
    echo ""
    echo "Usage: $0 <command> [domain]"
    echo ""
    echo "Commands:"
    echo "  add <domain>     - P≈ôid√° DNS z√°znam pro dom√©nu"
    echo "  remove <domain>  - Odstran√≠ DNS z√°znam pro dom√©nu"
    echo "  list             - Zobraz√≠ v≈°echny K3s DNS z√°znamy"
    echo "  sync             - Synchronizuje v≈°echny aplikace z K3s"
    echo "  backup           - Vytvo≈ô√≠ backup custom.list"
    echo "  restore          - Obnov√≠ backup custom.list"
    echo ""
    echo "Examples:"
    echo "  $0 add phptest.janzar.eu"
    echo "  $0 remove phptest.janzar.eu"
    echo "  $0 sync"
}

# Funkce pro kontrolu SSH p≈ôipojen√≠
check_ssh() {
    if ! ssh -o ConnectTimeout=5 -o BatchMode=yes $PIHOLE_USER@$PIHOLE_HOST exit 2>/dev/null; then
        echo "‚ùå Nelze se p≈ôipojit k Pi-hole serveru $PIHOLE_HOST"
        echo "üí° Zkontroluj:"
        echo "   - SSH kl√≠ƒçe: ssh-copy-id $PIHOLE_USER@$PIHOLE_HOST"
        echo "   - S√≠≈•ov√© p≈ôipojen√≠"
        echo "   - Pi-hole server bƒõ≈æ√≠"
        exit 1
    fi
}

# Funkce pro p≈ôid√°n√≠ DNS z√°znamu
add_dns_record() {
    local domain=$1
    
    if [ -z "$domain" ]; then
        echo "‚ùå Chyb√≠ dom√©na"
        echo "Usage: $0 add <domain>"
        exit 1
    fi
    
    echo "‚ûï P≈ôid√°v√°m DNS z√°znam: $domain ‚Üí $LOCAL_K3S_IP"
    
    # Odstranƒõn√≠ existuj√≠c√≠ho z√°znamu (pokud existuje)
    ssh $PIHOLE_USER@$PIHOLE_HOST "sed -i '/$domain/d' $PIHOLE_CUSTOM_LIST"
    
    # P≈ôid√°n√≠ nov√©ho z√°znamu
    ssh $PIHOLE_USER@$PIHOLE_HOST "echo '$LOCAL_K3S_IP $domain' >> $PIHOLE_CUSTOM_LIST"
    
    # Restart Pi-hole DNS
    ssh $PIHOLE_USER@$PIHOLE_HOST "docker exec pihole pihole restartdns"
    
    echo "‚úÖ DNS z√°znam p≈ôid√°n a Pi-hole restartov√°n"
}

# Funkce pro odstranƒõn√≠ DNS z√°znamu
remove_dns_record() {
    local domain=$1
    
    if [ -z "$domain" ]; then
        echo "‚ùå Chyb√≠ dom√©na"
        echo "Usage: $0 remove <domain>"
        exit 1
    fi
    
    echo "üóëÔ∏è  Odstra≈àuji DNS z√°znam: $domain"
    
    # Odstranƒõn√≠ z√°znamu
    ssh $PIHOLE_USER@$PIHOLE_HOST "sed -i '/$domain/d' $PIHOLE_CUSTOM_LIST"
    
    # Restart Pi-hole DNS
    ssh $PIHOLE_USER@$PIHOLE_HOST "docker exec pihole pihole restartdns"
    
    echo "‚úÖ DNS z√°znam odstranƒõn a Pi-hole restartov√°n"
}

# Funkce pro zobrazen√≠ K3s DNS z√°znam≈Ø
list_dns_records() {
    echo "üìã K3s DNS z√°znamy v Pi-hole:"
    echo ""
    
    # Zobrazen√≠ z√°znam≈Ø obsahuj√≠c√≠ch K3s IP
    ssh $PIHOLE_USER@$PIHOLE_HOST "grep '$LOCAL_K3S_IP' $PIHOLE_CUSTOM_LIST" || echo "≈Ω√°dn√© K3s DNS z√°znamy nenalezeny"
}

# Funkce pro synchronizaci v≈°ech K3s aplikac√≠
sync_k3s_apps() {
    echo "üîÑ Synchronizuji K3s aplikace s Pi-hole DNS..."
    
    # Kontrola kubectl
    if ! command -v kubectl &> /dev/null; then
        echo "‚ùå kubectl nen√≠ dostupn√Ω"
        exit 1
    fi
    
    # Export KUBECONFIG
    export KUBECONFIG=~/.kube/config
    
    # Z√≠sk√°n√≠ v≈°ech ingress host≈Ø
    local hosts=$(kubectl get ingress -A -o jsonpath='{range .items[*]}{.spec.rules[*].host}{"\n"}{end}' | sort | uniq)
    
    if [ -z "$hosts" ]; then
        echo "‚ùå ≈Ω√°dn√© ingress hosty nenalezeny"
        exit 1
    fi
    
    echo "üîç Nalezen√© K3s aplikace:"
    echo "$hosts"
    echo ""
    
    # P≈ôid√°n√≠ ka≈æd√©ho hostu do Pi-hole
    while IFS= read -r host; do
        if [ ! -z "$host" ]; then
            echo "‚ûï P≈ôid√°v√°m: $host"
            add_dns_record "$host"
        fi
    done <<< "$hosts"
    
    echo "‚úÖ Synchronizace dokonƒçena"
}

# Funkce pro backup
backup_custom_list() {
    local backup_file="custom.list.backup.$(date +%Y%m%d_%H%M%S)"
    
    echo "üíæ Vytv√°≈ô√≠m backup Pi-hole custom.list..."
    
    ssh $PIHOLE_USER@$PIHOLE_HOST "cp $PIHOLE_CUSTOM_LIST $PIHOLE_CUSTOM_LIST.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Sta≈æen√≠ backup na lok√°ln√≠ stroj
    scp $PIHOLE_USER@$PIHOLE_HOST:$PIHOLE_CUSTOM_LIST ./backups/$backup_file 2>/dev/null || {
        mkdir -p backups
        scp $PIHOLE_USER@$PIHOLE_HOST:$PIHOLE_CUSTOM_LIST ./backups/$backup_file
    }
    
    echo "‚úÖ Backup vytvo≈ôen: ./backups/$backup_file"
}

# Funkce pro restore
restore_custom_list() {
    echo "üîÑ Dostupn√© backupy:"
    ls -la backups/custom.list.backup.* 2>/dev/null || {
        echo "‚ùå ≈Ω√°dn√© backupy nenalezeny"
        exit 1
    }
    
    echo ""
    read -p "Zadej n√°zev backup souboru: " backup_file
    
    if [ ! -f "backups/$backup_file" ]; then
        echo "‚ùå Backup soubor nenalezen"
        exit 1
    fi
    
    echo "‚ö†Ô∏è  Obnovuji backup: $backup_file"
    read -p "Pokraƒçovat? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        scp backups/$backup_file $PIHOLE_USER@$PIHOLE_HOST:$PIHOLE_CUSTOM_LIST
        ssh $PIHOLE_USER@$PIHOLE_HOST "docker exec pihole pihole restartdns"
        echo "‚úÖ Backup obnoven a Pi-hole restartov√°n"
    else
        echo "‚ùå Restore zru≈°en"
    fi
}

# Hlavn√≠ logika
case "$1" in
    "add")
        check_ssh
        add_dns_record "$2"
        ;;
    "remove")
        check_ssh
        remove_dns_record "$2"
        ;;
    "list")
        check_ssh
        list_dns_records
        ;;
    "sync")
        check_ssh
        sync_k3s_apps
        ;;
    "backup")
        check_ssh
        backup_custom_list
        ;;
    "restore")
        check_ssh
        restore_custom_list
        ;;
    *)
        show_help
        exit 1
        ;;
esac
